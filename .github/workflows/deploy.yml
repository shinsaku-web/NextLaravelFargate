name: Deploy App
on:
  push:
    branches:
      - main

jobs:
  run-test:
    name: Run Test
    timeout-minutes: 30
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and run containers
        run: |
          docker compose -f docker-compose.yml up -d

      - name: sleep
        run: sleep 10  # コンテナの起動を待つ

      - name: Laravel Init
        run: |
          docker compose exec api touch .env
          docker compose exec api cp .env.example .env
          docker compose exec api composer install
          docker compose exec api php artisan key:generate
          docker compose exec api php artisan config:cache

      - name: run phpunit
        run: |
          docker compose exec api php artisan migrate --seed
          docker compose exec api php artisan test

      - name: run jest
        run: |
          docker compose exec client npm run test

  deploy:
    name: Deploy
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: run-test
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      ECR_REPOSITORY_CLIENT: my_app_client
      ECR_REPOSITORY_API: my_app_api
      ECR_REPOSITORY_NGINX: my_app_nginx
      ECS_TASK_DEFINITION: .aws/app-ecs-task-def.json
      IMAGE_TAG: latest
      ECS_SERVICE: my_app_service
      ECS_CLUSTER: my_app_cluster

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: rewrite task-definition
        run: |
          sed -i -e s/SED_AWS_REGION/${{ secrets.AWS_REGION }}/g .aws/app-ecs-task-def.json
          sed -i -e s/SED_TARGET_AWS_ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g .aws/app-ecs-task-def.json
          sed -i -e s/SED_AWS_S3_ENV_FILE_ARN_CLIENT/${{ secrets.AWS_S3_ENV_FILE_ARN_CLIENT }}/g .aws/app-ecs-task-def.json
          sed -i -e s/SED_AWS_S3_ENV_FILE_ARN_API/${{ secrets.AWS_S3_ENV_FILE_ARN_API }}/g .aws/app-ecs-task-def.json

      - name: build and push image to ECR
        timeout-minutes: 20
        id: build-image

        run: |
          echo "Building the Docker image client ..."
          docker build -t ${{env.ECR_REPOSITORY_CLIENT}} -f docker/client/Dockerfile .
          docker tag ${{env.ECR_REPOSITORY_CLIENT}}:${{env.IMAGE_TAG}} ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_CLIENT}}:${{env.IMAGE_TAG}}
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_CLIENT}}:${{env.IMAGE_TAG}}
          echo "image_client=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_CLIENT}}:${{env.IMAGE_TAG}}" >> $GITHUB_OUTPUT

          echo "Building the Docker image api ..."
          docker build -t ${{env.ECR_REPOSITORY_API}} -f docker/api/Dockerfile . --build-arg env=production
          docker tag ${{env.ECR_REPOSITORY_API}}:${{env.IMAGE_TAG}} ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_API}}:${{env.IMAGE_TAG}}
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_API}}:${{env.IMAGE_TAG}}
          echo "image_api=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_API}}:${{env.IMAGE_TAG}}" >> $GITHUB_OUTPUT

          echo "Building the Docker image nginx ..."
          docker build -t ${{env.ECR_REPOSITORY_NGINX}} -f docker/nginx/Dockerfile .
          docker tag ${{env.ECR_REPOSITORY_NGINX}}:${{env.IMAGE_TAG}} ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_NGINX}}:${{env.IMAGE_TAG}}
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_NGINX}}:${{env.IMAGE_TAG}}
          echo "image_nginx=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY_NGINX}}:${{env.IMAGE_TAG}}" >> $GITHUB_OUTPUT


      - name: render new task definition client
        id: task-def-client
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{env.ECS_TASK_DEFINITION}}
          container-name: client
          image: ${{ steps.build-image.outputs.image_client }}

      - name: render new task definition api
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{steps.task-def-client.outputs.task-definition}}
          container-name: api
          image: ${{ steps.build-image.outputs.image_api }}

      - name: render new task definition nginx
        id: task-def-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{steps.task-def-api.outputs.task-definition}}
          container-name: nginx
          image: ${{ steps.build-image.outputs.image_nginx }}

      - name: Deploy Amazon ECS task definition
        timeout-minutes: 20
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true